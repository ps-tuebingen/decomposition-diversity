data Nat where
   Zero()
   Succ(Nat)

cfun Nat:sub(m: Nat) : Nat :=
  case Zero() => Zero()
  case Succ(n) =>
     match Nat:aux m using n1 := n : Nat returning Nat with
        case Zero() => Succ(n1)
        case Succ(q) => n1.sub(q)

codata Val where
  apply(Val) : Val
  reify(Nat) : Exp

codata Env where
  index(Nat) : Val

codata Exp where
  eval(Env) : Val

fun idVal(v : Val) : Val :=
    v

gfun Cons(v: Val, env: Env) : Env :=
  cocase index(i) => idVal(
    match Nat:lookup i using v1 := v : Val, e := env : Env returning Val with
       case Zero() => v1
       case Succ(n) => e.index(n)
    )

gfun Nil() : Env :=
  cocase index(i) => Nil().index(i)

gfun Var(n: Nat) : Exp :=
  cocase eval(env) => env.index(n)

gfun App(f: Exp, a: Exp) : Exp :=
  cocase eval(env) => f.eval(env).apply(a.eval(env))

gfun Fun(body: Exp): Exp :=
  cocase eval(env) =>
     comatch Val:Closure using b := body : Exp, en := env : Env with
        cocase apply(arg) => b.eval(Cons(arg,en))
        cocase reify(lvl) => Fun(b.eval(Cons(ResVar(Succ(lvl)),en)).reify(Succ(lvl)))

gfun ResVar(n: Nat) : Val :=
  cocase apply(arg) => ResApp(ResVar(n),arg)
  cocase reify(lvl) => Var(lvl.sub(n))

gfun ResApp(v1: Val, v2: Val) : Val :=
  cocase apply(v3) => ResApp(ResApp(v1,v2),v3)
  cocase reify(lvl) => App(v1.reify(lvl),v2.reify(lvl))
