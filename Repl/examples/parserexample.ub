/*
Example Program to test Parser
*/

data Bool where
  True()
  False()

data Void where


data Nat where
  Zero()
  Succ(Nat)

fun testSuccZero() : Nat :=
  Succ(Zero())

data Test1 where
  Constr1(Nat, Nat, Nat, Nat)
  Constr2(Nat, Nat, Nat, Nat)

codata Test2 where
  destr1(Nat, NatStream, Nat, Nat) : Bool
  destr2(Nat, Nat, Nat, Nat) : Nat

fun test4() : Nat :=
  4

fun testx(x : Bool, y : Bool, z : Bool, v : Bool, w : Bool) : Bool :=
  x

fun testy(x : Bool, y : Bool, z : Bool, v : Bool, w : Bool) : Bool :=
  y

fun testz(x : Bool, y : Bool, z : Bool, v : Bool, w : Bool) : Bool :=
  z

fun testv(x : Bool, y : Bool, z : Bool, v : Bool, w : Bool) : Bool :=
  v

fun testw(x : Bool, y : Bool, z : Bool, v : Bool, w : Bool) : Bool :=
  w

fun testLetFooInFoo(x : Bool, y : Bool, z : Bool, v : Bool, w : Bool) : Bool :=
  let foo := x
  in foo

fun testLetFooInZ(x : Bool, y : Bool, z : Bool, v : Bool, w : Bool) : Bool :=
  let foo := x
  in z

gfun Ascending(x : Nat) : Test2 :=
  cocase destr1(y,z,v,w) => True()
  cocase destr2(y,z,v,w) => x

cfun Test1:mycfun(x : Bool) : Nat :=
  case Constr1(y, z, v, w) => y
  case Constr2(y, z, v, w) => z


codata NatStream where
  current() : Nat
  next() : NatStream

