data Nat where
   Zero()
   Succ(Nat)
data Bool where
   True()
   False()

codata NatStream where
   Current() : Nat
   Next() : NatStream

fun three() : Nat :=
    3
fun constStream(x : Nat) : NatStream :=
    comatch NatStream:ConstStream using y := x : Nat with
       cocase Current() => y
       cocase Next() => constStream(y)

fun addStreamsStrict(x : NatStream , y : NatStream) : NatStream :=
    let z := y.Current() 
    in let v := x.Current() 
       in let w := y.Next() 
          in let x1 := x.Next() 
             in comatch NatStream:AddStreamsStrict using x5 := z : Nat , x4 := v : Nat , x3 := w : NatStream , x2 := x1 : NatStream with
                   cocase Current() => x5.Plus(x4)
                   cocase Next() => addStreamsStrict(x3 , x2)

fun omega() : Nat :=
    omega()


fun isEven(x : Nat) : Bool :=
    match Nat:Even x returning Bool with
      case Zero() => True()
      case Succ(y) => match Nat:Odd y returning Bool with
                        case Zero() => False()
                        case Succ(z) => isEven(z)

cfun Bool:And(x : Bool) : Bool :=
    case True() => x
    case False() => False()

cfun Nat:Plus(x : Nat) : Nat :=
    case Zero() => x
    case Succ(y) => Succ(y.Plus(x))
    
cfun Nat:GetAtIndex(x : NatStream) : Nat :=
    case Zero() => x.Current()
    case Succ(y) => y.GetAtIndex(x.Next())
    
cfun Nat:OmegaMatch() : Nat :=
    case Zero() => 0
    case Succ(x) => Succ(x).OmegaMatch()

gfun AddToStream(x : NatStream , y : Nat) : NatStream :=
   cocase Current() => y.Plus(x.Current())
   cocase Next() => AddToStream(x.Next() , y)
   
//gfun Ascending() : NatStream :=
//   cocase Current() => 0
//   cocase Next() => addToStream(Ascending() , 1)
   
gfun AddStreams(y : NatStream , x : NatStream) : NatStream :=
   cocase Current() => y.Current().Plus(x.Current())
   cocase Next() => AddStreams(y.Next() , x.Next())
   
gfun OmegaComatch() : NatStream :=
   cocase Current() => 0
   cocase Next() => OmegaComatch().Next()
   
gfun Fibonacci() : NatStream :=
   cocase Current() => 0
   cocase Next() => ShiftedFib()
   
gfun ShiftedFib() : NatStream :=
   cocase Current() => 1
   cocase Next() => AddStreams(Fibonacci() , ShiftedFib())

fun isZero(x : Nat) : Bool :=
  match Nat:IsZero x returning Bool with
    case Zero() => True()
    case Succ(y) => False()

