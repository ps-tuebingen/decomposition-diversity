data Identifier where
     Tik()
     Tok(Identifier)

data Expr where
    EVar(Identifier)
    ENot(Expr)
    EAnd(Expr, Expr)
    EOr(Expr, Expr)

data Value where
     ValPosVar(Identifier)
     ValNegVar(Identifier)
     ValAnd(Value, Value)
     ValOr(Value, Value)

data Redex where
    RedNot(Expr)
    RedAnd(Expr, Expr)
    RedOr(Expr, Expr)

data Found where
    FoundValue(Value)
    FoundRedex(Redex, Value2Found)

data Value2Found where
   _EmptyCtx()
   _AndCtx1(Expr , Value2Found)
   _AndCtx2(Value , Value2Found)
   _OrCtx1(Expr , Value2Found)
   _OrCtx4(Value , Value2Found)

fun search(e : Expr) : Found :=
   e.searchPos(_EmptyCtx())

cfun Value2Found:apply(v : Value) : Found :=
   case _EmptyCtx()      => FoundValue(v)
   case _AndCtx1(e,ctx)  => e.searchPos(_AndCtx2(v,ctx))
   case _AndCtx2(v2,ctx) => ctx.apply(ValAnd(v, v2))
   case _OrCtx1(e,ctx)   => e.searchPos(_OrCtx4(v,ctx))
   case _OrCtx4(v2,ctx)  => ctx.apply(ValOr(v,v2))

cfun Expr:searchPos(ctx : Value2Found) : Found :=
   case EVar(id)    => ctx.apply(ValPosVar(id))
   case ENot(e)     => e.searchNeg(ctx)
   case EAnd(e1,e2) => e1.searchPos(_AndCtx1(e2, ctx))
   case EOr(e1,e2)  => e1.searchPos(_OrCtx1(e2 , ctx))

cfun Expr:searchNeg(ctx : Value2Found) : Found :=
   case EVar(id) => ctx.apply(ValNegVar(id))
   case ENot(e) => FoundRedex(RedNot(e), ctx)
   case EAnd(e1,e2) => FoundRedex(RedAnd(e1, e2), ctx)
   case EOr(e1,e2) => FoundRedex(RedOr(e1, e2), ctx)

