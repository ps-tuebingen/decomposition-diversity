data Identifier where
     Tik()
     Tok(Identifier)

data Expr where
    EVar(Identifier)
    ENot(Expr)
    EAnd(Expr, Expr)
    EOr(Expr, Expr)

data Value where
     ValPosVar(Identifier)
     ValNegVar(Identifier)
     ValAnd(Value, Value)
     ValOr(Value, Value)

data Redex where
    RedNot(Expr)
    RedAnd(Expr, Expr)
    RedOr(Expr, Expr)

data Found where
    FoundValue(Value)
    FoundRedex(Redex, Value2Found)

codata Value2Found where
   apply(Value) : Found
   combine(Expr) : Expr

fun search(e : Expr) : Found :=
 e.searchPos( comatch Value2Found:EmptyCtx  with
                 cocase apply(v) => FoundValue(v)
                 cocase combine(e) => e
            )

cfun Expr:searchPos(ctx : Value2Found) : Found :=
   case EVar(id) => ctx.apply(ValPosVar(id))
   case ENot(e) => e.searchNeg(ctx)
   case EAnd(e1,e2) => e1.searchPos( comatch Value2Found:AndCtx1 using e2 := e2 : Expr , ctx := ctx : Value2Found with
                                              cocase apply(v1) => e2.searchPos( comatch Value2Found:AndCtx2 using v1 := v1 : Value , ctx := ctx : Value2Found with
                                                                                         cocase apply(v2) => ctx.apply(ValAnd(v1 ,v2))
                                                                                         cocase combine(ex) => EAnd(v1.asExpr() , ctx.combine(ex))
								              )
                                              cocase combine(ex) => EAnd(ctx.combine(ex) , e2)
				   )
   case EOr(e1,e2) => e1.searchPos( comatch Value2Found:OrCtx1 using e2 := e2 : Expr , ctx := ctx : Value2Found with
                                              cocase apply(v1) => e2.searchPos(comatch Value2Found:OrCtx4 using v1 := v1 : Value , ctx := ctx : Value2Found with
                                                                                         cocase apply(v2) => ctx.apply(ValOr(v1, v2))
                                                                                         cocase combine(ex) => EOr(v1.asExpr() , ctx.combine(ex))
									      )
                                              cocase combine(ex) => EOr(ctx.combine(ex) , e2)
			          )

cfun Expr:searchNeg(ctx : Value2Found) : Found :=
   case EVar(id)    => ctx.apply(ValNegVar(id))
   case ENot(e)     => FoundRedex(RedNot(e) , ctx)
   case EAnd(e1,e2) => FoundRedex(RedAnd(e1, e2) , ctx)
   case EOr(e1,e2)  => FoundRedex(RedOr(e1, e2) , ctx)

cfun Value:asExpr() : Expr :=
   case ValPosVar(id) => EVar(id)
   case ValNegVar(id) => ENot(EVar(id))
   case ValAnd(v1,v2) => EAnd(v1.asExpr() , v2.asExpr())
   case ValOr(v1,v2)  => EOr(v1.asExpr() , v2.asExpr())
