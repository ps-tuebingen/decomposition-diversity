data Nat where
   Zero()
   Succ(Nat)

consumer function Nat:Sub(m: Nat) : Nat :=
  case Zero() => Zero()
  case Succ(n) => 
     match Nat:Aux m using n1 := n : Nat returning Nat with
        case Zero() => Succ(n1)
        case Succ(q) => n1.Sub(q)
     
codata Val where
  Apply(Val) : Val
  Reify(Nat) : Exp

codata Env where
  Index(Nat) : Val

codata Exp where
  Eval(Env) : Val

generator function Cons(v: Val, env: Env) : Env :=
  cocase Index(i) => 
    match Nat:Lookup i using v1 := v : Val, e := env : Env returning Env with
       case Zero() => v1
       case Succ(n) => e.Index(n) 
       
generator function Nil() : Env :=
  cocase Index(i) => Zero()
         
generator function Var(n: Nat) : Exp :=
  cocase Eval(env) => env.Index(n)
  
generator function App(f: Exp, a: Exp) : Exp :=
  cocase Eval(env) => f.Eval(env).Apply(a.Eval(env))  
  
generator function Fun(body: Exp): Exp :=
  cocase Eval(env) => 
     comatch Val:Closure using b := body : Exp, en := env : Env with
        cocase Apply(arg) => b.Eval(Cons(arg,en))  
        cocase Reify(lvl) => Fun(b.Eval(Cons(ResVar(Succ(lvl)),en)).Reify(Succ(lvl)))
        
generator function ResVar(n: Nat) : Val :=
  cocase Apply(arg) => ResApp(ResVar(n),arg)
  cocase Reify(lvl) => Var(sub(lvl,n))       
  
generator function ResApp(v1: Val, v2: Val) : Val := 
  cocase Apply(v3) => ResApp(ResApp(v1,v2),v3)
  cocase Reify(lvl) => App(v1.Reify(lvl),v2.Reify(lvl))  
