data Nat where
   Zero()
   Succ(Nat)
data Bool where
   True()
   False()

codata NatStream where
   current() : Nat
   next() : NatStream

fun three() : Nat :=
    3
fun constStream(x : Nat) : NatStream :=
    comatch NatStream:ConstStream using y := x : Nat with
       cocase current() => y
       cocase next() => constStream(y)

fun addStreamsStrict(x : NatStream , y : NatStream) : NatStream :=
    let z := y.current()
    in let v := x.current()
       in let w := y.next()
          in let x1 := x.next()
             in comatch NatStream:AddStreamsStrict using x5 := z : Nat , x4 := v : Nat , x3 := w : NatStream , x2 := x1 : NatStream with
                   cocase current() => x5.plus(x4)
                   cocase next() => addStreamsStrict(x3 , x2)

fun omega() : Nat :=
    omega()


fun isEven(x : Nat) : Bool :=
    match Nat:even x returning Bool with
      case Zero() => True()
      case Succ(y) => match Nat:odd y returning Bool with
                        case Zero() => False()
                        case Succ(z) => isEven(z)

cfun Bool:and(x : Bool) : Bool :=
    case True() => x
    case False() => False()

cfun Nat:plus(x : Nat) : Nat :=
    case Zero() => x
    case Succ(y) => Succ(y.plus(x))

cfun Nat:getAtIndex(x : NatStream) : Nat :=
    case Zero() => x.current()
    case Succ(y) => y.getAtIndex(x.next())

cfun Nat:omegaMatch() : Nat :=
    case Zero() => 0
    case Succ(x) => Succ(x).omegaMatch()

gfun AddToStream(x : NatStream , y : Nat) : NatStream :=
   cocase current() => y.plus(x.current())
   cocase next() => AddToStream(x.next() , y)

//gfun Ascending() : NatStream :=
//   cocase current() => 0
//   cocase next() => addToStream(Ascending() , 1)

gfun AddStreams(y : NatStream , x : NatStream) : NatStream :=
   cocase current() => y.current().plus(x.current())
   cocase next() => AddStreams(y.next() , x.next())

gfun OmegaComatch() : NatStream :=
   cocase current() => 0
   cocase next() => OmegaComatch().next()

gfun Fibonacci() : NatStream :=
   cocase current() => 0
   cocase next() => ShiftedFib()

gfun ShiftedFib() : NatStream :=
   cocase current() => 1
   cocase next() => AddStreams(Fibonacci() , ShiftedFib())

fun isZero(x : Nat) : Bool :=
  match Nat:isZeroL x returning Bool with
    case Zero() => True()
    case Succ(y) => False()

