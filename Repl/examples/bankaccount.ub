data Nat where
   Zero()
   Succ(Nat)

data Bool where
  True()
  False()

codata BankAccount where
  Balance() : Nat
  Withdraw(Nat) : BankAccount

fun ifThenElse(b : Bool, t : BankAccount, e : BankAccount) : BankAccount :=
  match Bool:Ite b using x := t : BankAccount , y := e : BankAccount returning BankAccount with
    case True() => x
    case False() => y

cfun Nat:BalanceAfterNWithdrawals(ba : BankAccount, amount : Nat) : Nat :=
  case Zero() => ba.Balance()
  case Succ(y) => let next := ba.Withdraw(amount)
                  in y.BalanceAfterNWithdrawals(next, amount)

cfun Nat:Plus(x : Nat) : Nat :=
  case Zero() => x
  case Succ(y) => Succ(y.Plus(x))

cfun Nat:Minus(x : Nat) : Nat :=
  case Zero() => Zero()
  case Succ(y) => match Nat:MinusHelper x using z := y : Nat returning Nat with
                    case Zero() => Succ(z)
                    case Succ(v) => z.Minus(v)

cfun Nat:IsZero() : Bool :=
  case Zero() => True()
  case Succ(x) => False()

cfun Nat:LessThan(x : Nat) : Bool :=
  case Zero() => match Nat:LessThanZero x returning Bool with
                    case Zero() => False ()
                    case Succ(y) => True ()
  case Succ(y) => match Nat:LessThanSucc x using y := y : Nat returning Bool with
                    case Zero() => False()
 		    case Succ(z) => z.LessThan(y)


gfun RegularAccount(bal : Nat) : BankAccount :=
  cocase Balance() => bal
  cocase Withdraw(n) => ifThenElse(bal.LessThan(n), RegularAccount(bal), RegularAccount(bal.Minus(n)))

gfun StatefullAccount(bal : Nat) : BankAccount :=
  cocase Balance() => bal
  cocase Withdraw(n) => comatch BankAccount:OddStatefullAccount using b := bal : Nat with
                         cocase Balance() => b
                         cocase Withdraw(n) => StatefullAccount(b.Minus(n))
 
