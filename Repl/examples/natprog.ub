data Nat where
   Zero()
   Succ(Nat)
data Bool where
   True()
   False()

codata NatStream where
   current() : Nat
   next() : NatStream

function three() : Nat :=
   3
   
function constStream(x : Nat) : NatStream :=
   comatch NatStream:ConstStream using y := x : Nat with
      cocase current() => y
      cocase next() => constStream(y)

function addStreamsStrict(x : NatStream , y : NatStream) : NatStream :=
   let z := y.current() 
   in let v := x.current() 
      in let w := y.next() 
         in let x1 := x.next() 
            in comatch NatStream:AddStreamsStrict using x5 := z : Nat , x4 := v : Nat , x3 := w : NatStream , x2 := x1 : NatStream with
                  cocase current() => x5.plus(x4)
                  cocase next() => addStreamsStrict(x3 , x2)

function omega() : Nat :=
   omega()

consumer function Nat:plus(x : Nat) : Nat :=
   case Zero() => x
   case Succ(y) => Succ(y.plus(x))

consumer function Nat:getAtIndex(x : NatStream) : Nat :=
   case Zero() => x.current()
   case Succ(y) => y.getAtIndex(x.next())

consumer function Nat:omegaMatch() : Nat :=
   case Zero() => 0
   case Succ(x) => Succ(x).omegaMatch()

generator function AddToStream(x : NatStream , y : Nat) : NatStream :=
   cocase current() => y.plus(x.current())
   cocase next() => AddToStream(x.next() , y)
   
generator function Ascending() : NatStream :=
   cocase current() => 0
   cocase next() => AddToStream(Ascending() , 1)
   
generator function AddStreams(y : NatStream , x : NatStream) : NatStream :=
   cocase current() => y.current().plus(x.current())
   cocase next() => AddStreams(y.next() , x.next())
   
generator function OmegaComatch() : NatStream :=
   cocase current() => 0
   cocase next() => OmegaComatch().next()
   
generator function Fibonacci() : NatStream :=
   cocase current() => 0
   cocase next() => ShiftedFib()
   
generator function ShiftedFib() : NatStream :=
   cocase current() => 1
   cocase next() => AddStreams(Fibonacci() , ShiftedFib())
