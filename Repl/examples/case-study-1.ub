/* General: */

data Identifier where
     Tik()
     Tok(Identifier)

data Expr where
    EVar(Identifier)
    ENot(Expr)
    EAnd(Expr, Expr)
    EOr(Expr, Expr)

data Value where
     ValPosVar(Identifier)
     ValNegVar(Identifier)
     ValAnd(Value, Value)
     ValOr(Value, Value)

data Redex where
    RedNot(Expr)
    RedAnd(Expr, Expr)
    RedOr(Expr, Expr)

cfun Value:asExpr() : Expr :=
  case ValPosVar(id) => EVar(id)
  case ValNegVar(id) => ENot(EVar(id))
  case ValAnd(e1,e2) => EAnd(e1.asExpr(), e2.asExpr())
  case ValOr(e1,e2)  => EOr(e1.asExpr(), e2.asExpr())

cfun Redex:eval() : Expr :=
  case RedNot(e)     => e
  case RedAnd(e1,e2) => EOr(ENot(e1), ENot(e2))
  case RedOr(e1,e2)  => EAnd(ENot(e1), ENot(e2))

/* Specific to this step: */

data Found where
    FoundValue(Value)
    FoundRedex(Redex)

codata Value2Found where
       apply(Value) : Found

cfun Expr:searchNeg(ctx : Value2Found) : Found :=
	 case EVar(n)     => ctx.apply(ValNegVar(n))
	 case ENot(e)     => FoundRedex(RedNot(e))
	 case EAnd(e1,e2) => FoundRedex(RedAnd(e1,e2))
	 case EOr(e1,e2)  => FoundRedex(RedOr(e1,e2))

cfun Expr:searchPos(ctx : Value2Found) : Found :=
	 case EVar(n)     => ctx.apply(ValPosVar(n))
	 case ENot(e)     => e.searchNeg(ctx)
	 case EAnd(e1,e2) => e1.searchPos( comatch Value2Found:AndCnt1 using e2 := e2 : Expr, ctx := ctx : Value2Found  with
                                                    cocase apply(val1) => e2.searchPos( comatch Value2Found:AndCnt2 using val1 := val1 : Value , ctx := ctx : Value2Found with
                                                                                             cocase apply(val2) => ctx.apply(ValAnd(val1, val2))
                                                                                       )
                                          )
	 case EOr(e1,e2)  => e1.searchPos( comatch Value2Found:OrCnt1 using e2 := e2 : Expr, ctx := ctx : Value2Found  with
                                                    cocase apply(val1) => e2.searchPos( comatch Value2Found:OrCnt2 using val1 := val1 : Value , ctx := ctx : Value2Found with
                                                                                             cocase apply(val2) => ctx.apply(ValOr(val1, val2))
                                                                                       )
                                          )

fun search(e : Expr) : Found :=
  e.searchPos(comatch Value2Found:BaseCnt with
                    cocase apply(val) => FoundValue(val)
  )

