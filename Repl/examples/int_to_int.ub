
data Nat where
  Zero()
  Succ(Nat)

data Even where
  EZero()
  ESucc(Even)

data Nat2Nat where
  Plus(Nat)
  Mult(Nat)

cfun Nat:PlusFun(y : Nat) : Nat :=
  case Zero()  => y
  case Succ(x) => Succ( x.PlusFun(y) )

cfun Nat:MultFun(y : Nat) : Nat :=
  case Zero()  => Zero()
  case Succ(x) => y.PlusFun( x.MultFun(y))

cfun Even:EPlus(y : Nat) : Nat :=
  case EZero()  => y
  case ESucc(x) => Succ(Succ(x.EPlus(y)))

cfun Even:EMult(y : Nat) : Nat :=
  case EZero()  => Zero()
  case ESucc(x) => y.PlusFun(y.PlusFun(x.EMult(y)))

cfun Nat2Nat:Apply(y : Nat) : Nat :=
  case Plus(x) => y.PlusFun(x)
  case Mult(x) => y.MultFun(x)

cfun Nat2Nat:EApply(y : Even) : Nat :=
  case Plus(x) => y.EPlus(x)
  case Mult(x) => y.EMult(x)
