data Identifier where
     Tik()
     Tok(Identifier)

data Expr where
    EVar(Identifier)
    ENot(Expr)
    EAnd(Expr, Expr)
    EOr(Expr, Expr)

data Value where
     ValPosVar(Identifier)
     ValNegVar(Identifier)
     ValAnd(Value, Value)
     ValOr(Value, Value)

data Redex where
    RedNot(Expr)
    RedAnd(Expr, Expr)
    RedOr(Expr, Expr)

data Found where
    FoundValue(Value)
    FoundRedex(Redex, Value2Found)

data Value2Found where
   _EmptyCtx()
   _AndCtx1(Expr , Value2Found)
   _AndCtx2(Value , Value2Found)
   _OrCtx1(Expr , Value2Found)
   _OrCtx4(Value , Value2Found)

function search(e : Expr) : Found :=
   e.SearchPos(_EmptyCtx())

consumer function Value2Found:Apply(v : Value) : Found :=
   case _EmptyCtx()      => FoundValue(v)
   case _AndCtx1(e,ctx)  => e.SearchPos(_AndCtx2(v,ctx))
   case _AndCtx2(v2,ctx) => ctx.Apply(ValAnd(v, v2))
   case _OrCtx1(e,ctx)   => e.SearchPos(_OrCtx4(v,ctx))
   case _OrCtx4(v2,ctx)  => ctx.Apply(ValOr(v,v2))

consumer function Expr:SearchPos(ctx : Value2Found) : Found :=
   case EVar(id)    => ctx.Apply(ValPosVar(id))
   case ENot(e)     => e.SearchNeg(ctx)
   case EAnd(e1,e2) => e1.SearchPos(_AndCtx1(e2, ctx))
   case EOr(e1,e2)  => e1.SearchPos(_OrCtx1(e2 , ctx))

consumer function Expr:SearchNeg(ctx : Value2Found) : Found :=
   case EVar(id) => ctx.Apply(ValNegVar(id))
   case ENot(e) => FoundRedex(RedNot(e), ctx)
   case EAnd(e1,e2) => FoundRedex(RedAnd(e1, e2), ctx)
   case EOr(e1,e2) => FoundRedex(RedOr(e1, e2), ctx)

consumer function Value:AsExpr() : Expr :=
   case ValPosVar(id) => EVar(id)
   case ValNegVar(id) => ENot(EVar(id))
   case ValAnd(v1,v2) => EAnd(v1.AsExpr(), v2.AsExpr())
   case ValOr(v1,v2)  => EOr(v1.AsExpr(), v2.AsExpr())

consumer function Value2Found:Combine(e : Expr) : Expr :=
   case _EmptyCtx() => e
   case _AndCtx1(e2, ctx) => EAnd(ctx.Combine(e), e2)
   case _AndCtx2(v, ctx)  => EAnd(v.AsExpr(), ctx.Combine(e))
   case _OrCtx1(e2, ctx)  => EOr(ctx.Combine(e), e2)
   case _OrCtx4(v, ctx)   => EOr(v.AsExpr(), ctx.Combine(e))
