
data Nat where
  Zero()
  Succ(Nat)

data Even where
  EZero()
  ESucc(Even)

data Nat2Nat where
  Plus(Nat)
  Mult(Nat)

cfun Nat:plusFun(y : Nat) : Nat :=
  case Zero()  => y
  case Succ(x) => Succ( x.plusFun(y) )

cfun Nat:multFun(y : Nat) : Nat :=
  case Zero()  => Zero()
  case Succ(x) => y.plusFun( x.multFun(y))

cfun Even:ePlus(y : Nat) : Nat :=
  case EZero()  => y
  case ESucc(x) => Succ(Succ(x.ePlus(y)))

cfun Even:eMult(y : Nat) : Nat :=
  case EZero()  => Zero()
  case ESucc(x) => y.plusFun(y.plusFun(x.eMult(y)))

cfun Nat2Nat:apply(y : Nat) : Nat :=
  case Plus(x) => y.plusFun(x)
  case Mult(x) => y.multFun(x)

cfun Nat2Nat:eApply(y : Even) : Nat :=
  case Plus(x) => y.ePlus(x)
  case Mult(x) => y.eMult(x)
