data Nat where
   Zero()
   Succ(Nat)

data Color where
  Red()
  Yellow()
  Green()

data Bool where
  True()
  False()

codata TrafficLight where
  color() : Color
  switch() : TrafficLight

fun ifThenElse(b : Bool, t : TrafficLight, e : TrafficLight) : TrafficLight :=
  match Bool:ite b using x := t : TrafficLight , y := e : TrafficLight returning TrafficLight with
    case True() => x
    case False() => y

cfun Nat:nthColor(tl : TrafficLight) : Color :=
  case Zero() => tl.color()
  case Succ(y) => let next := tl.switch()
                  in y.nthColor(next)

cfun Nat:plus(x : Nat) : Nat :=
  case Zero() => x
  case Succ(y) => Succ(y.plus(x))

gfun ConstRed() : TrafficLight :=
  cocase color() => Red()
  cocase switch() => ConstRed()

gfun RedLight() : TrafficLight :=
  cocase color() => Red()
  cocase switch() => comatch TrafficLight:GreenLight with
                         cocase color() => Green()
                         cocase switch() => comatch TrafficLight:YellowLight with
                                                cocase color() => Yellow()
                                                cocase switch() => RedLight()

