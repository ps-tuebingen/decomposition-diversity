data Nat where
   Zero()
   Succ(Nat)
data Bool where
   True()
   False()

codata NatStream where
   Current() : Nat
   Next() : NatStream

function three() : Nat :=
   3
   
function constStream(x : Nat) : NatStream :=
   comatch NatStream:ConstStream using y := x : Nat with
      cocase Current() => y
      cocase Next() => constStream(y)

function addStreamsStrict(x : NatStream , y : NatStream) : NatStream :=
   let z := y.Current() 
   in let v := x.Current() 
      in let w := y.Next() 
         in let x1 := x.Next() 
            in comatch NatStream:AddStreamsStrict using x5 := z : Nat , x4 := v : Nat , x3 := w : NatStream , x2 := x1 : NatStream with
                  cocase Current() => x5.Plus(x4)
                  cocase Next() => addStreamsStrict(x3 , x2)

function omega() : Nat :=
   omega()

consumer function Nat:Plus(x : Nat) : Nat :=
   case Zero() => x
   case Succ(y) => Succ(y.Plus(x))

consumer function Nat:GetAtIndex(x : NatStream) : Nat :=
   case Zero() => x.Current()
   case Succ(y) => y.GetAtIndex(x.Next())

consumer function Nat:OmegaMatch() : Nat :=
   case Zero() => 0
   case Succ(x) => Succ(x).OmegaMatch()

generator function AddToStream(x : NatStream , y : Nat) : NatStream :=
   cocase Current() => y.Plus(x.Current())
   cocase Next() => AddToStream(x.Next() , y)
   
generator function Ascending() : NatStream :=
   cocase Current() => 0
   cocase Next() => AddToStream(Ascending() , 1)
   
generator function AddStreams(y : NatStream , x : NatStream) : NatStream :=
   cocase Current() => y.Current().Plus(x.Current())
   cocase Next() => AddStreams(y.Next() , x.Next())
   
generator function OmegaComatch() : NatStream :=
   cocase Current() => 0
   cocase Next() => OmegaComatch().Next()
   
generator function Fibonacci() : NatStream :=
   cocase Current() => 0
   cocase Next() => ShiftedFib()
   
generator function ShiftedFib() : NatStream :=
   cocase Current() => 1
   cocase Next() => AddStreams(Fibonacci() , ShiftedFib())
